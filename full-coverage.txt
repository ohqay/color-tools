
 RUN  v2.1.9 /Users/tarek/development/creating-mcp/color-converter-mcp
      Coverage enabled with v8

 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateRelativeLuminance > should calculate correct luminance for white
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateRelativeLuminance > should calculate correct luminance for black
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateRelativeLuminance > should calculate correct luminance for red
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateRelativeLuminance > should calculate correct luminance for green
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateRelativeLuminance > should calculate correct luminance for blue
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateRelativeLuminance > should calculate correct luminance for mid-gray
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateContrastRatio > should calculate 21:1 for black on white
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateContrastRatio > should calculate 1:1 for same colors
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > calculateContrastRatio > should handle color order correctly
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > checkContrast > should pass all WCAG standards for black on white
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > checkContrast > should fail for similar colors
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > checkContrast > should pass AA large text only for moderate contrast
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > checkContrast > should handle RGB input format
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > checkContrast > should handle HSL input format
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > findAccessibleColor > should return original color if already accessible
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > findAccessibleColor > should find darker alternative for light background
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > findAccessibleColor > should find lighter alternative for dark background
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > findAccessibleColor > should maintain hue when requested
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > findAccessibleColor > should find black/white when maintainHue is false
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > findAccessibleColor > should respect preferDarker option
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > getContrastReport > should return contrast against white, black, and gray
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > getContrastReport > should work with string color input
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > suggestAccessiblePairs > should return accessible color pairs
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > suggestAccessiblePairs > should maintain base color hue
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > suggestAccessiblePairs > should sort by contrast ratio
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > WCAG compliance edge cases > should correctly identify AA compliance boundaries
 ✓ src/__tests__/colorAccessibility.test.ts > Color Accessibility > WCAG compliance edge cases > should correctly identify AAA compliance boundaries
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Normal Blend Mode (LAB Space) > should mix two colors at 50% ratio
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Normal Blend Mode (LAB Space) > should mix colors at different ratios
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Normal Blend Mode (LAB Space) > should preserve perceptual uniformity in LAB space
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Multiply Blend Mode > should multiply colors correctly
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Multiply Blend Mode > should darken colors when multiplied
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Screen Blend Mode > should screen colors correctly
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Screen Blend Mode > should lighten colors when screened
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Overlay Blend Mode > should apply overlay blend correctly
 × src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Alpha Channel Handling > should mix colors with alpha channels
   → expected 0.5019607843137255 to be close to 0.5, received difference is 0.0019607843137254832, but expected 0.0005
 × src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Alpha Channel Handling > should handle mixed alpha and non-alpha colors
   → expected 0.5019607843137255 to be close to 0.5, received difference is 0.0019607843137254832, but expected 0.0005
 × src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Alpha Channel Handling > should interpolate alpha values
   → expected 0.5019607843137255 to be close to 0.5, received difference is 0.0019607843137254832, but expected 0.0005
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Error Handling > should throw error for invalid color formats
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Error Handling > should throw error for unknown blend mode
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Named Colors > should mix named colors
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Named Colors > should mix named color with hex color
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Complex Color Formats > should mix different color formats
 × src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Complex Color Formats > should mix LAB colors directly
   → expected 6.56 to be close to +0, received difference is 6.56, but expected 5
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Complex Color Formats > should mix XYZ colors
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Output Formats > should include all color formats in result
 ✓ src/__tests__/colorMixing.test.ts > Color Mixing > mixColors - Output Formats > should include raw values for all formats
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Helper Methods > should normalize hue values correctly
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Helper Methods > should handle color format conversion
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Complementary Harmony > should generate complementary colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Complementary Harmony > should apply angle adjustment
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Complementary Harmony > should handle different output formats
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Analogous Harmony > should generate default 3 analogous colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Analogous Harmony > should generate custom number of analogous colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Analogous Harmony > should use custom angle between colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Triadic Harmony > should generate triadic colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Triadic Harmony > should handle HSL output format
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Tetradic/Square Harmony > should generate tetradic colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Tetradic/Square Harmony > should handle angle adjustment
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Split-Complementary Harmony > should generate split-complementary colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Split-Complementary Harmony > should generate correct split angles
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Double-Complementary Harmony > should generate double-complementary colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Double-Complementary Harmony > should form a rectangle on color wheel
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > General Harmony Generation > should generate harmony by type
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > General Harmony Generation > should throw error for invalid harmony type
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > General Harmony Generation > should handle square as alias for tetradic
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Generate All Harmonies > should generate all harmony types
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Generate All Harmonies > should respect output format for all harmonies
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Raw Values > should include raw HSL values
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Edge Cases > should handle grayscale colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Edge Cases > should handle named colors
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Edge Cases > should handle invalid color input
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Edge Cases > should handle very small analogous angles
 ✓ src/__tests__/colorHarmony.test.ts > ColorHarmony > Edge Cases > should handle large angle adjustments
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > detectFormat > should detect LAB format
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > detectFormat > should detect XYZ format
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to XYZ conversion > should convert black to XYZ
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to XYZ conversion > should convert white to XYZ (D65 illuminant)
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to XYZ conversion > should convert red to XYZ
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to XYZ conversion > should convert green to XYZ
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to XYZ conversion > should convert blue to XYZ
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to XYZ conversion > should handle mid-range RGB values
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > XYZ to RGB conversion > should convert XYZ black to RGB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > XYZ to RGB conversion > should convert XYZ white to RGB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > XYZ to RGB conversion > should handle out-of-gamut values by clamping
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > XYZ to RGB conversion > should handle negative XYZ values
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > XYZ to LAB conversion > should convert XYZ black to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > XYZ to LAB conversion > should convert XYZ white to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > XYZ to LAB conversion > should convert XYZ mid-gray to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > LAB to XYZ conversion > should convert LAB black to XYZ
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > LAB to XYZ conversion > should convert LAB white to XYZ
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > LAB to XYZ conversion > should handle LAB values with positive a and b
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > LAB to XYZ conversion > should handle LAB values with negative a and b
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to LAB conversion > should convert RGB black to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to LAB conversion > should convert RGB white to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to LAB conversion > should convert RGB red to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to LAB conversion > should convert RGB green to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > RGB to LAB conversion > should convert RGB blue to LAB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > LAB to RGB conversion > should convert LAB black to RGB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > LAB to RGB conversion > should convert LAB white to RGB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > LAB to RGB conversion > should handle LAB values that are out of RGB gamut
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseLABString > should parse LAB strings correctly
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseLABString > should throw error for L value out of range
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseLABString > should throw error for extreme a/b values
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseLABString > should return null for invalid format
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseXYZString > should parse XYZ strings correctly
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseXYZString > should throw error for negative XYZ values
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseXYZString > should return null for invalid format
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > formatLAB > should format LAB values correctly
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > formatXYZ > should format XYZ values correctly
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseToRGB with LAB/XYZ > should parse LAB string to RGB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > parseToRGB with LAB/XYZ > should parse XYZ string to RGB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > Round-trip conversions > should maintain color accuracy through RGB -> XYZ -> LAB -> XYZ -> RGB
 ✓ src/__tests__/labXyzConversions.test.ts > LAB and XYZ Color Conversions > Round-trip conversions > should maintain color accuracy through RGB -> LAB -> RGB
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Complete color conversion workflows > should handle a complete workflow from hex to all formats
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Complete color conversion workflows > should maintain color accuracy through multiple conversions
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Complete color conversion workflows > should handle alpha channel throughout conversion pipeline
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect 3-digit hex
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect 6-digit hex
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect 4-digit hex with alpha
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect 8-digit hex with alpha
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect named color
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect RGB with parentheses
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect RGB without parentheses
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect RGBA
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect HSL
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect HSLA
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect HSB
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect HSV
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Auto-detection scenarios > should auto-detect CMYK
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'red' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'lime' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'blue' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'yellow' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'cyan' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'magenta' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'black' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'white' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'gray' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should convert named color 'darkslategray' correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should handle transparent color specially
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Named color conversions > should throw error for currentcolor
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Edge cases and error handling > should handle very small RGB values
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Edge cases and error handling > should handle maximum values
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Edge cases and error handling > should handle pure colors
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Edge cases and error handling > should handle invalid inputs gracefully
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Selective format conversion > should convert only to requested formats
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Selective format conversion > should handle empty target formats array
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Format variations > should handle RGB format variations
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Format variations > should handle HSL format variations
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Format variations > should handle case-insensitive named colors
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Hex with alpha conversions > should handle 4-digit hex with alpha correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Hex with alpha conversions > should handle 8-digit hex with alpha correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Hex with alpha conversions > should convert between hex with alpha and RGBA correctly
 ✓ src/__tests__/integration.test.ts > Color Converter Integration Tests > Performance considerations > should handle batch conversions efficiently
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Format Detection > should detect LAB format
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Format Detection > should detect XYZ format
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Format Detection > should return null for invalid formats
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > RGB to XYZ Conversion > should convert pure colors correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > RGB to XYZ Conversion > should convert mid-range colors correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > XYZ to RGB Conversion > should convert back to RGB correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > XYZ to RGB Conversion > should clamp out-of-gamut values
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > XYZ to LAB Conversion > should convert XYZ to LAB correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > LAB to XYZ Conversion > should convert LAB to XYZ correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > RGB to LAB Conversion > should convert RGB to LAB correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > LAB to RGB Conversion > should convert LAB to RGB correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Parse LAB String > should parse valid LAB strings
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Parse LAB String > should throw error for invalid LAB values
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Parse LAB String > should return null for invalid format
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Parse XYZ String > should parse valid XYZ strings
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Parse XYZ String > should throw error for negative XYZ values
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Parse XYZ String > should return null for invalid format
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Format LAB and XYZ > should format LAB correctly
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Format LAB and XYZ > should format XYZ correctly
 × src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Convert Method with LAB and XYZ > should convert from LAB format
   → expected 'lab(53.24%, 80.09, 67.21)' to be 'lab(53.24%, 80.09, 67.2)' // Object.is equality
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Convert Method with LAB and XYZ > should convert from XYZ format
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Convert Method with LAB and XYZ > should include LAB and XYZ in output when requested
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > Convert Method with LAB and XYZ > should include LAB and XYZ in default output
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > parseToRGB with LAB and XYZ > should parse LAB input to RGB
 ✓ src/__tests__/labXyz.test.ts > LAB and XYZ Color Space Support > parseToRGB with LAB and XYZ > should parse XYZ input to RGB
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect hex format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect named colors as hex format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect RGB format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect RGBA format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect HSL format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect HSLA format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect HSB/HSV format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should detect CMYK format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > detectFormat > should return null for invalid formats
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > hexToRGB > should convert 3-digit hex to RGB
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > hexToRGB > should convert 6-digit hex to RGB
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > hexToRGB > should handle hex without #
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > hexToRGB > should convert 4-digit hex with alpha to RGBA
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > hexToRGB > should convert 8-digit hex with alpha to RGBA
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > hexToRGB > should return null for invalid hex
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHex > should convert RGB to hex
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHex > should clamp values outside 0-255 range
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHex > should convert RGBA to 8-digit hex
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHex > should clamp alpha values outside 0-1 range
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHSL and hslToRGB > should convert RGB to HSL
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHSL and hslToRGB > should convert HSL to RGB
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHSL and hslToRGB > should handle grayscale conversions
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHSB and hsbToRGB > should convert RGB to HSB
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToHSB and hsbToRGB > should convert HSB to RGB
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToCMYK and cmykToRGB > should convert RGB to CMYK
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > rgbToCMYK and cmykToRGB > should convert CMYK to RGB
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBString > should parse RGB strings
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBString > should throw error for invalid RGB values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBString > should throw error for negative RGB values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBString > should return null for invalid format
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBAString > should parse RGBA strings
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBAString > should throw error for invalid alpha values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBAString > should throw error for negative alpha values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseRGBAString > should throw error for invalid RGB values in RGBA
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSLString > should parse HSL strings
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSLString > should throw error for invalid HSL values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSLAString > should parse HSLA strings
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSLAString > should throw error for invalid HSLA saturation/lightness values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSLAString > should throw error for invalid HSLA alpha values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSLAString > should throw error for invalid hue values in HSLA
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSLAString > should return null for negative values in HSLA
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSBString > should parse HSB/HSV strings
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseHSBString > should throw error for invalid HSB values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseCMYKString > should parse CMYK strings
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseCMYKString > should throw error for invalid CMYK values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseCMYKString > should throw error for negative CMYK values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > format methods > should format RGB correctly
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > format methods > should format RGBA correctly
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > format methods > should format HSL correctly
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > format methods > should format HSLA correctly
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > format methods > should format HSB correctly
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > format methods > should format CMYK correctly
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseToRGB > should parse named colors
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseToRGB > should handle transparent color
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseToRGB > should throw error for currentcolor
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > parseToRGB > should parse all formats correctly
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > convert > should convert between all formats
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > convert > should convert to specific formats only
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > convert > should handle RGBA conversions
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > convert > should include raw values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > convert > should throw error for invalid input
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > convert > should set hsv same as hsb
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > edge cases and special values > should handle pure white
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > edge cases and special values > should handle pure black
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > edge cases and special values > should handle mid-gray
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > edge cases and special values > should handle case insensitive named colors
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > LAB and XYZ in convert method > should convert to LAB and XYZ formats
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > LAB and XYZ in convert method > should include LAB and XYZ raw values
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > LAB and XYZ in convert method > should convert LAB input to other formats
 ✓ src/__tests__/colorConverter.test.ts > ColorConverter > LAB and XYZ in convert method > should convert XYZ input to other formats
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Basic color definitions > should define all basic colors correctly
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Gray color variations > should define gray shades correctly
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Gray color variations > should have consistent spelling variations
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Common web colors > should define common web colors correctly
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Extended color palette > should define extended colors correctly
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Extended color palette > should define all red-based colors
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Extended color palette > should define all green-based colors
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Extended color palette > should define all blue-based colors
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Special keywords > should define special CSS keywords
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Special keywords > should not have special keywords that are hex colors
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Color format validation > should have all regular colors in valid hex format
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Color format validation > should have lowercase hex values
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Color relationships > should have aqua equal to cyan
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Color relationships > should have fuchsia equal to magenta
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Color relationships > should have different values for lime and green
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Color count and completeness > should have at least 140 named colors
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Color count and completeness > should contain all CSS3 standard colors
 ✓ src/__tests__/namedColors.test.ts > NAMED_COLORS > Specific color values > should have correct values for commonly used colors
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateColorBlindness > should simulate protanopia (red-blind)
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateColorBlindness > should simulate deuteranopia (green-blind)
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateColorBlindness > should simulate tritanopia (blue-blind)
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateColorBlindness > should simulate achromatopsia (complete color blindness)
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateColorBlindness > should handle string color input
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateColorBlindness > should preserve white and black
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateColorBlindness > should handle anomalous types (partial color blindness)
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateAllColorBlindness > should simulate all types of color blindness
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > simulateAllColorBlindness > should produce different results for different types
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > areColorsDistinguishable > should identify distinguishable colors
 × src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > areColorsDistinguishable > should identify indistinguishable colors
   → expected true to be false // Object.is equality
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > areColorsDistinguishable > should use custom threshold
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > areColorsDistinguishable > should handle string color inputs
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > findColorBlindSafeAlternative > should find alternative color distinguishable from reference colors
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > findColorBlindSafeAlternative > should return null when no safe alternative exists
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > findColorBlindSafeAlternative > should prefer minimal changes when possible
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > generateColorBlindSafePalette > should generate requested number of colors
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > generateColorBlindSafePalette > should ensure all colors are distinguishable
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > generateColorBlindSafePalette > should include base colors in palette
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > generateColorBlindSafePalette > should handle edge case with single color request
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > colorBlindnessInfo > should provide info for all color blindness types
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > colorBlindnessInfo > should have correct severity levels
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > Edge cases and validation > should handle pure colors correctly
 ✓ src/__tests__/colorBlindness.test.ts > Color Blindness Simulation > Edge cases and validation > should maintain color relationships
 ✓ src/__tests__/index.test.ts > MCP Server Tools > convert-colour tool > should convert color successfully
 ✓ src/__tests__/index.test.ts > MCP Server Tools > convert-colour tool > should auto-detect format
 ✓ src/__tests__/index.test.ts > MCP Server Tools > convert-colour tool > should convert to specific formats only
 ✓ src/__tests__/index.test.ts > MCP Server Tools > convert-colour tool > should handle named colors
 ✓ src/__tests__/index.test.ts > MCP Server Tools > convert-colour tool > should handle RGBA colors
 ✓ src/__tests__/index.test.ts > MCP Server Tools > convert-colour tool > should handle errors gracefully
 ✓ src/__tests__/index.test.ts > MCP Server Tools > convert-colour tool > should validate input
 ✓ src/__tests__/index.test.ts > MCP Server Tools > Tool schemas and structure > should have proper convert-colour tool schema
 ✓ src/__tests__/index.test.ts > MCP Server Tools > Tool schemas and structure > should have proper color-info tool schema
 ✓ src/__tests__/index.test.ts > MCP Server Tools > Tool response formats > should format convert-colour success response correctly
 ✓ src/__tests__/index.test.ts > MCP Server Tools > Tool response formats > should format convert-colour error response correctly
 ✓ src/__tests__/index.test.ts > MCP Server Tools > Tool response formats > should format color-info response correctly
 ✓ src/__tests__/index.test.ts > MCP Server Tools > Integration with ColorConverter > should handle all supported input formats
 ✓ src/__tests__/index.test.ts > MCP Server Tools > Integration with ColorConverter > should handle edge cases
 ✓ src/__tests__/resources.integration.test.ts > MCP Server Resources Integration > ListResourcesRequestSchema > should list all available resources
 ✓ src/__tests__/resources.integration.test.ts > MCP Server Resources Integration > Resource URIs > should have valid URI patterns
 ✓ src/__tests__/resources.integration.test.ts > MCP Server Resources Integration > Resource Content Structure > color-palettes resource should return palette metadata
 ✓ src/__tests__/resources.integration.test.ts > MCP Server Resources Integration > Resource Content Structure > palette resources should return color data
 ✓ src/__tests__/resources.integration.test.ts > MCP Server Resources Integration > Resource Content Structure > named colors resource should return categorized colors
 ✓ src/__tests__/resources.integration.test.ts > MCP Server Resources Integration > Resource Content Structure > web-safe colors resource should return 216 colors
 ✓ src/__tests__/harmony.integration.test.ts > Color Harmony MCP Integration > should generate complementary harmony through MCP
 ✓ src/__tests__/harmony.integration.test.ts > Color Harmony MCP Integration > should generate triadic harmony with RGB output
 ✓ src/__tests__/harmony.integration.test.ts > Color Harmony MCP Integration > should generate analogous harmony with custom options
 ✓ src/__tests__/harmony.integration.test.ts > Color Harmony MCP Integration > should include raw HSL values
 ✓ src/__tests__/harmony.integration.test.ts > Color Harmony MCP Integration > should handle error cases
 ✓ src/__tests__/harmony.integration.test.ts > Color Harmony MCP Integration > should include harmony description
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 4-digit hex format (#RGBA) > should detect 4-digit hex format
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 4-digit hex format (#RGBA) > should parse 4-digit hex with full opacity
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 4-digit hex format (#RGBA) > should parse 4-digit hex with zero opacity
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 4-digit hex format (#RGBA) > should parse 4-digit hex with partial opacity
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 4-digit hex format (#RGBA) > should convert 4-digit hex to other formats
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 8-digit hex format (#RRGGBBAA) > should detect 8-digit hex format
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 8-digit hex format (#RRGGBBAA) > should parse 8-digit hex with full opacity
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 8-digit hex format (#RRGGBBAA) > should parse 8-digit hex with zero opacity
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 8-digit hex format (#RRGGBBAA) > should parse 8-digit hex with 50% opacity
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > 8-digit hex format (#RRGGBBAA) > should convert 8-digit hex to other formats
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > RGBA to Hex conversion > should convert RGBA to 8-digit hex
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > RGBA to Hex conversion > should convert RGBA with full opacity to 8-digit hex
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > RGBA to Hex conversion > should convert RGBA with zero opacity to 8-digit hex
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > RGBA to Hex conversion > should convert RGBA string to hex with alpha
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > Backward compatibility > should still parse 3-digit hex without alpha
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > Backward compatibility > should still parse 6-digit hex without alpha
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > Backward compatibility > should convert RGB without alpha to 6-digit hex
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > Backward compatibility > should handle conversion from non-alpha format
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > Edge cases > should handle invalid hex lengths
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > Edge cases > should handle invalid hex characters
 ✓ src/__tests__/alphaHex.test.ts > Alpha Hex Format Support > Edge cases > should properly round alpha values
 ✓ src/__tests__/resources.test.ts > Color Palettes > getAllPalettes > should return all available palettes
 ✓ src/__tests__/resources.test.ts > Color Palettes > getPalette > should return Material Design palette
 ✓ src/__tests__/resources.test.ts > Color Palettes > getPalette > should return Tailwind palette
 ✓ src/__tests__/resources.test.ts > Color Palettes > getPalette > should return undefined for unknown palette
 ✓ src/__tests__/resources.test.ts > Color Palettes > Material Design Palette > should have correct structure
 ✓ src/__tests__/resources.test.ts > Color Palettes > Material Design Palette > should have correct color structure
 ✓ src/__tests__/resources.test.ts > Color Palettes > Tailwind Palette > should have correct structure
 ✓ src/__tests__/resources.test.ts > Color Palettes > Tailwind Palette > should have 11 shades per color
 ✓ src/__tests__/resources.test.ts > Web Safe Colors > should have 216 colors
 ✓ src/__tests__/resources.test.ts > Web Safe Colors > should have correct color structure
 ✓ src/__tests__/resources.test.ts > Web Safe Colors > should only use web-safe values
 ✓ src/__tests__/resources.test.ts > Web Safe Colors > Web Safe Color Groups > should have correct groups
 ✓ src/__tests__/resources.test.ts > Web Safe Colors > Web Safe Color Groups > should have all colors categorized
 ✓ src/__tests__/resources.test.ts > Web Safe Colors > Web Safe Colors Resource > should have correct structure
 ✓ src/__tests__/resources.test.ts > Named Colors Categories > should have correct categories
 ✓ src/__tests__/resources.test.ts > Named Colors Categories > should have valid color structure
 ✓ src/__tests__/resources.test.ts > Named Colors Categories > Named Colors Resource > should have correct structure
 ✓ src/__tests__/resources.test.ts > Named Colors Categories > Named Colors Resource > should have sorted colors

 Test Files  3 failed | 11 passed (14)
      Tests  6 failed | 351 passed (357)
   Start at  19:29:20
   Duration  1.22s (transform 363ms, setup 0ms, collect 796ms, tests 305ms, environment 9ms, prepare 2.51s)

